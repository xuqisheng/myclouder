<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                         http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
                         http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
                         http://www.dangdang.com/schema/ddframe/rdb
       http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">

	<!-- 引入jdbc配置文件 -->
	<!--<context:property-placeholder location="classpath:jdbc.properties" />-->
	<!-- 配置进行解密  -->
	<bean id="propertyConfigurer" class="com.myclouder.common.plugin.EncryptPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${m.jdbc.url}" />
		<property name="username" value="${m.jdbc.username}" />
		<property name="password" value="${m.jdbc.password}" />

		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${m.jdbc.driver}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 为Mybatis创建SqlSessionFactory，同时指定数据源 -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="parentDataSource"/>
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:/mybatis/mapping/*.xml"/>

	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper；集成mapper -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.myclouder.upms.dal.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
			</value>
		</property>
	</bean>

	<!--<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="basePackage" value="**.mapper"/>-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
	<!--</bean>-->

	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="parentDataSource"/>
	</bean>

	<!-- 事务管理 属性 -->
	<!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="append*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->
			<!--<tx:method name="repair" propagation="REQUIRED" rollback-for="java.lang.Exception"/>-->

			<!--<tx:method name="get*" propagation="REQUIRED" read-only="true"/>-->
			<!--<tx:method name="find*" propagation="REQUIRED" read-only="true"/>-->
			<!--<tx:method name="load*" propagation="REQUIRED" read-only="true"/>-->
			<!--<tx:method name="search*" propagation="REQUIRED" read-only="true"/>-->
			<!--<tx:method name="datagrid*" propagation="REQUIRED" read-only="true"/>-->

			<!--<tx:method name="*" propagation="REQUIRED" read-only="true"/>-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!-- 配置切面 -->
	<!--<aop:config>-->
		<!--<aop:pointcut id="transactionPointcut" expression="execution(* com.myclouder.upms.service.*.*(..))"/>-->
		<!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>-->
	<!--</aop:config>-->

	<!-- 启动注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>